#include "peano/grid/nodes/Constants.h"
#include "peano/grid/nodes/loops/CallEnterCellLoopBodyOnRegularRefinedPatch.h"


template <class Vertex, class Cell, class State, class EventHandle>
tarch::logging::Log peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::_log( "peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch" );

template <class Vertex, class Cell, class State, class EventHandle>
tarch::multicore::BooleanSemaphore peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::_semaphore;


//#ifdef Parallel
//#include <set>
//
//#include "peano/parallel/SendReceiveBufferPool.h"
//#endif


template <class Vertex, class Cell, class State, class EventHandle>
peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch(
  State&                                           state,
  EventHandle&                                     eventHandle,
  peano::grid::RegularGridContainer<Vertex,Cell>&  regularGridContainer
):
  _level(-1),
  _state(state),
  _eventHandle(eventHandle),
  _threadLocalEventHandle(eventHandle),
  _regularGridContainer(regularGridContainer),
  _numberOfInnerVertices(0.0),
  _numberOfBoundaryVertices(0.0),
  _numberOfOuterVertices(0.0),
  _fineGridEnumerator(_regularGridContainer.getVertexEnumerator(1)),
  _coarseGridEnumerator(_regularGridContainer.getVertexEnumerator(0)) {
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::setLevel(int level) {
  assertion( level>=1 );
  _level = level;
  _fineGridEnumerator    = _regularGridContainer.getVertexEnumerator(level);
  _coarseGridEnumerator  = _regularGridContainer.getVertexEnumerator(level-1);
}


template <class Vertex, class Cell, class State, class EventHandle>
peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::~CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch() {
  tarch::multicore::Lock lock(_semaphore);

  _state.incNumberOfInnerVertices(_numberOfInnerVertices);
  _state.incNumberOfBoundaryVertices(_numberOfBoundaryVertices);
  _state.incNumberOfOuterVertices(_numberOfOuterVertices);

  #if defined(SharedMemoryParallelisation)
  _eventHandle.mergeWithWorkerThread( _threadLocalEventHandle );
  #endif
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::operator() (const tarch::la::Vector<DIMENSIONS, int>&  i) {
  logDebug( "callTouchVertexFirstTime(...)", "study vertex at " << i << " on level " << _level );

  tarch::la::Vector<DIMENSIONS,int> offsetOfCoarseGridEnumerator;
  tarch::la::Vector<DIMENSIONS,int> positionWithinNextCoarserCell;

  computePositionRelativeToNextCoarserLevelFromFineGridVertexPosition(i,offsetOfCoarseGridEnumerator,positionWithinNextCoarserCell);

  _fineGridEnumerator.setOffset(i);
  _coarseGridEnumerator.setOffset(offsetOfCoarseGridEnumerator);

  const int fineGridVertexIndex = _fineGridEnumerator.lineariseVertexIndex(i);
  const int coarseGridCellIndex = _coarseGridEnumerator.lineariseCellIndex(offsetOfCoarseGridEnumerator);

  Vertex& currentVertex = _regularGridContainer.getVertex(_level,fineGridVertexIndex);
  if (!currentVertex.isOutside()  && !_regularGridContainer.isReadFromTemporaryStack(_level,fineGridVertexIndex) ) {
    _threadLocalEventHandle.touchVertexFirstTime(
      currentVertex,
      _fineGridEnumerator.getVertexPosition(),
      _fineGridEnumerator.getCellSize(),
      _regularGridContainer.getVertex(_level-1),
      _coarseGridEnumerator,
      _regularGridContainer.getCell(_level-1,coarseGridCellIndex),
      positionWithinNextCoarserCell
    );
    if (currentVertex.isBoundary()) {
      _numberOfBoundaryVertices += 1.0;
    }
    else {
      _numberOfInnerVertices += 1.0;
    }
  }
  else {
    _numberOfOuterVertices += 1.0;
  }
}


template <class Vertex, class Cell, class State, class EventHandle>
int peano::grid::nodes::loops::CallTouchVertexFirstTimeLoopBodyOnRegularRefinedPatch<Vertex,Cell,State,EventHandle>::getLevel() const {
  return _level;
}
