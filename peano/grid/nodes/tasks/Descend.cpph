#include "peano/datatraversal/dForLoop.h"
#include "peano/datatraversal/SingleLevelCellLoop.h"
#include "peano/MappingSpecification.h"

#ifdef SharedMemoryParallisation
#include "tarch/multicore/BooleanSemaphore.h"
#endif


template <class Vertex, class Cell, class State, class EventHandle>
peano::grid::nodes::tasks::Descend<Vertex,Cell,State,EventHandle>::Descend(
  const int              treeDepth,
  State&                 state,
  EventHandle&           eventHandle,
  RegularGridContainer&  gridContainer,
  bool                   precedingLoadProcessMayFork,
  bool                   descendProcessRunsInParallelToOtherTasks
):
  _treeDepth(treeDepth),
  _state(state),
  _eventHandle(eventHandle),
  _gridContainer( gridContainer ),
  _touchVertexFirstTimeLoopBody(_state, _eventHandle, _gridContainer),
  _enterCellLoopBody(_state, _eventHandle, _gridContainer),
  _descendLoopBody(_eventHandle, _gridContainer ),
  _precedingLoadProcessMayFork(precedingLoadProcessMayFork),
  _descendProcessRunsInParallelToOtherTasks(descendProcessRunsInParallelToOtherTasks) {
  assertion( treeDepth>=1 );
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Descend<Vertex,Cell,State,EventHandle>::touchVerticesFirstTime(int level) {
  const bool runOperation =
    (_eventHandle.touchVertexFirstTimeSpecification().manipulates == peano::MappingSpecification::WHOLE_TREE) ||
    (_eventHandle.touchVertexFirstTimeSpecification().manipulates == peano::MappingSpecification::ONLY_LEAVES && level == _treeDepth);

  if (runOperation) {
    #if !defined(SharedMemoryParallelisation)
    assertion2(_gridContainer.isLevelInitialised(level), level, _gridContainer.toString());
    #else
    while (_descendProcessRunsInParallelToOtherTasks && !_gridContainer.isLevelInitialised(level)) {
      sendThisTaskToBackgroundWith1Argument(
        "peano::grid::nodes::tasks::Descend::touchVerticesFirstTime(int)",
        level
      );
    }
    tarch::multicore::BooleanSemaphore::continueWithTask();
    #endif

    const tarch::la::Vector<DIMENSIONS,int> NumberOfVertices      = _gridContainer.getNumberOfVertices(level);
    const int                               sharedMemoryGrainSize =
      !_eventHandle.touchVertexFirstTimeSpecification().multithreading ? 0 :
      peano::datatraversal::autotuning::Oracle::getInstance().parallelise(
        tarch::la::volume(NumberOfVertices),peano::datatraversal::autotuning::CallTouchFirstTimeOnRegularStationaryGrid
      );
    _touchVertexFirstTimeLoopBody.setLevel(level);
    peano::datatraversal::dForLoop<TouchVertexFirstTimeLoopBody>( NumberOfVertices, _touchVertexFirstTimeLoopBody, sharedMemoryGrainSize );
    if (_eventHandle.touchVertexFirstTimeSpecification().multithreading) {
      peano::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::datatraversal::autotuning::CallTouchFirstTimeOnRegularStationaryGrid);
    }
  }
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Descend<Vertex,Cell,State,EventHandle>::enterCells(int level) {
  const bool runOperation =
    (_eventHandle.enterCellSpecification().manipulates == peano::MappingSpecification::WHOLE_TREE) ||
    (_eventHandle.enterCellSpecification().manipulates == peano::MappingSpecification::ONLY_LEAVES && level == _treeDepth);

  if (runOperation) {
    const tarch::la::Vector<DIMENSIONS,int> NumberOfCells         = _gridContainer.getNumberOfCells(level);
    const int                               sharedMemoryGrainSize =
      !_eventHandle.enterCellSpecification().multithreading ? 0 :
      peano::datatraversal::autotuning::Oracle::getInstance().parallelise(
        tarch::la::volume(NumberOfCells) / TWO_POWER_D, peano::datatraversal::autotuning::CallEnterCellOnRegularStationaryGrid
      );
    _enterCellLoopBody.setLevel(level);
    peano::datatraversal::SingleLevelCellLoop<EnterCellLoopBody> loop(
      NumberOfCells,
      _enterCellLoopBody,
      sharedMemoryGrainSize
    );
    if (_eventHandle.enterCellSpecification().multithreading) {
      peano::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::datatraversal::autotuning::CallEnterCellOnRegularStationaryGrid);
    }
  }
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Descend<Vertex,Cell,State,EventHandle>::descend(int fineGridLevel) {
  const bool runOperation =
    (_eventHandle.descendSpecification().manipulates == peano::MappingSpecification::WHOLE_TREE) ||
    (_eventHandle.descendSpecification().manipulates == peano::MappingSpecification::ONLY_LEAVES && fineGridLevel == _treeDepth);

  if (runOperation) {
    const tarch::la::Vector<DIMENSIONS,int> NumberOfCoarseGridCells = _gridContainer.getNumberOfCells(fineGridLevel-1);
    const int                               sharedMemoryGrainSize   =
      !_eventHandle.descendSpecification().multithreading ? 0 :
      peano::datatraversal::autotuning::Oracle::getInstance().parallelise(
        tarch::la::volume(NumberOfCoarseGridCells) / TWO_POWER_D, peano::datatraversal::autotuning::DescendOnRegularStationaryGrid 
      );

    _descendLoopBody.setCoarseGridLevel(fineGridLevel-1);
    peano::datatraversal::SingleLevelCellLoop<DescendLoopBody> loop(
        NumberOfCoarseGridCells,
        _descendLoopBody,
      sharedMemoryGrainSize
    );

    if (_eventHandle.descendSpecification().multithreading) {
      peano::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::datatraversal::autotuning::DescendOnRegularStationaryGrid);
    }
  }
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Descend<Vertex,Cell,State,EventHandle>::operator() () {
  #if defined(SharedMemoryParallelisation)
  while (
     _precedingLoadProcessMayFork &&
     !_descendProcessRunsInParallelToOtherTasks &&
     !_gridContainer.isLevelInitialised(_treeDepth)
  ) {
    sendThisTaskToBackgroundWith1Argument(
      "peano::grid::nodes::tasks::Descend::operator()",
      _treeDepth
    );
  }
  tarch::multicore::BooleanSemaphore::continueWithTask();
  #endif


  const bool skipCoarseLevelsCompletely =
    (_eventHandle.touchVertexFirstTimeSpecification().manipulates != peano::MappingSpecification::WHOLE_TREE) &&
    (_eventHandle.enterCellSpecification().manipulates            != peano::MappingSpecification::WHOLE_TREE) &&
    (_eventHandle.descendSpecification().manipulates              != peano::MappingSpecification::WHOLE_TREE);


  if (skipCoarseLevelsCompletely) {
    touchVerticesFirstTime(_treeDepth);
    descend(_treeDepth);
    enterCells(_treeDepth);
  }
  else {
    for (int level=0; level<=_treeDepth; level++) {
      if (level==_treeDepth) {
        enterCells( level );
      }
      else if (level==0) {
        touchVerticesFirstTime( level+1 );
        descend(level+1);
      }
      else {
        enterCells( level );
        touchVerticesFirstTime( level+1 );
        descend(level+1);
      }
    }
  }
}
