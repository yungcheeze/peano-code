template < class Vertex, class Cell, class State, class EventHandle>
tarch::logging::Log peano::spacetreegrid::nodes::tasks::InvokeEnterCell< Vertex, Cell, State, EventHandle >::_log( "peano::spacetreegrid::nodes::tasks::InvokeEnterCell" );


template < class Vertex, class Cell, class State, class EventHandle>
peano::spacetreegrid::nodes::tasks::InvokeEnterCell< Vertex, Cell, State, EventHandle >::InvokeEnterCell(
  State&                                                      state,
  Cell&                                                       fineGridCell,
  Vertex* const                                               fineGridVertices,
  const peano::spacetreegrid::SingleLevelEnumerator&  fineGridVerticesEnumerator,
  Cell&                                                       coarseGridCell,
  Vertex*const                                                coarseGridVertices,
  const peano::spacetreegrid::SingleLevelEnumerator&  coarseGridVerticesEnumerator,
  const tarch::la::Vector<DIMENSIONS,int>&                    fineGridPositionOfCell,
  EventHandle&                                                eventHandle
):
  _state(state),
  _fineGridCell(fineGridCell),
  _fineGridVertices(fineGridVertices),
  _fineGridVerticesEnumerator(fineGridVerticesEnumerator),
  _coarseGridCell(coarseGridCell),
  _coarseGridVertices(coarseGridVertices),
  _coarseGridVerticesEnumerator(coarseGridVerticesEnumerator),
  _fineGridPositionOfCell(fineGridPositionOfCell),
  _eventHandle(eventHandle),
  _threadLocalEventHandle(eventHandle),
  _innerCells(0),
  _outerCells(0) {
}

template < class Vertex, class Cell, class State, class EventHandle>
void peano::spacetreegrid::nodes::tasks::InvokeEnterCell< Vertex, Cell, State, EventHandle >::operator() () {
  logTraceInWith1Argument( "operator()", _fineGridCell.toString() );

  #ifdef Parallel
  const bool invokeEvent = _fineGridCell.isInside() && !_fineGridCell.isRemote(_state,true,true);
  #else
  const bool invokeEvent = _fineGridCell.isInside();
  #endif

  if (invokeEvent) {
    _threadLocalEventHandle.enterCell(
      _fineGridCell,
      _fineGridVertices,
      _fineGridVerticesEnumerator,
      _coarseGridVertices,
      _coarseGridVerticesEnumerator,
      _coarseGridCell,
      _fineGridPositionOfCell
    );
    _innerCells += 1.0;
  }
  else {
    _outerCells += 1.0;
  }

  logTraceOut( "operator()" );
}


template < class Vertex, class Cell, class State, class EventHandle>
peano::spacetreegrid::nodes::tasks::InvokeEnterCell< Vertex, Cell, State, EventHandle >::~InvokeEnterCell() {
  _state.incNumberOfOuterCells( _outerCells );
  _state.incNumberOfInnerCells( _innerCells );

  #if defined(SharedMemoryParallelisation)
  _eventHandle.mergeWithWorkerThread( _threadLocalEventHandle );
  #endif
}
