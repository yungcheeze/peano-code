#include "peano/datatraversal/dForLoop.h"
#include "peano/datatraversal/SingleLevelCellLoop.h"
#include "peano/MappingSpecification.h"


template <class Vertex, class Cell, class State, class EventHandle>
tarch::logging::Log  peano::grid::nodes::tasks::Ascend<Vertex,Cell,State,EventHandle>::_log( "peano::grid::nodes::tasks::Ascend" );


template <class Vertex, class Cell, class State, class EventHandle>
peano::grid::nodes::tasks::Ascend<Vertex,Cell,State,EventHandle>::Ascend(
  const int              treeDepth,
  State&                 state,
  EventHandle&           eventHandle,
  RegularGridContainer&  gridContainer
):
  _treeDepth( treeDepth ),
  _state(state),
  _eventHandle( eventHandle ),
  _gridContainer( gridContainer ),
  _treeRemainsStatic( true ),
  _calledTouchVertexLastTime(false),
  _touchVertexLastTimeLoopBody( _treeDepth, _eventHandle, _gridContainer, _treeRemainsStatic ),
  _leaveCellLoopBody( _eventHandle, _gridContainer ),
  _ascendLoopBody(_eventHandle, _gridContainer ) {
  assertion( treeDepth>=1 );
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Ascend<Vertex,Cell,State,EventHandle>::touchVerticesLastTime(int level) {
  bool runOperation =
    (_eventHandle.touchVertexLastTimeSpecification().manipulates == peano::MappingSpecification::WHOLE_TREE) ||
    (_eventHandle.touchVertexLastTimeSpecification().manipulates == peano::MappingSpecification::ONLY_LEAVES && level == _treeDepth);

  if (runOperation) {
    const tarch::la::Vector<DIMENSIONS,int> NumberOfVertices      = _gridContainer.getNumberOfVertices(level);
    const int                               sharedMemoryGrainSize =
      !_eventHandle.touchVertexLastTimeSpecification().multithreading ? 0 :
      peano::datatraversal::autotuning::Oracle::getInstance().parallelise(
        tarch::la::volume(NumberOfVertices),peano::datatraversal::autotuning::CallTouchLastTimeOnRegularStationaryGrid
      );
    _touchVertexLastTimeLoopBody.setLevel( level );
    peano::datatraversal::dForLoop<TouchVertexLastTimeLoopBody>( NumberOfVertices, _touchVertexLastTimeLoopBody, sharedMemoryGrainSize );

    if (_eventHandle.touchVertexLastTimeSpecification().multithreading) {
      peano::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::datatraversal::autotuning::CallTouchLastTimeOnRegularStationaryGrid);
    }
    _calledTouchVertexLastTime = true;
  }

  _gridContainer.haveCalledAllEventsOnThisLevel(level);
}



template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Ascend<Vertex,Cell,State,EventHandle>::leaveCells(int level) {
  const bool runOperation =
    (_eventHandle.leaveCellSpecification().manipulates == peano::MappingSpecification::WHOLE_TREE) ||
    (_eventHandle.leaveCellSpecification().manipulates == peano::MappingSpecification::ONLY_LEAVES && level == _treeDepth);

  if (runOperation) {
    const tarch::la::Vector<DIMENSIONS,int> NumberOfCells         = _gridContainer.getNumberOfCells(level);
    const int                               sharedMemoryGrainSize =
      !_eventHandle.leaveCellSpecification().multithreading ? 0 :
      peano::datatraversal::autotuning::Oracle::getInstance().parallelise(
        tarch::la::volume(NumberOfCells),peano::datatraversal::autotuning::CallLeaveCellOnRegularStationaryGrid
      );

    _leaveCellLoopBody.setLevel( level );
    peano::datatraversal::SingleLevelCellLoop<LeaveCellLoopBody> loop(
      NumberOfCells,
      _leaveCellLoopBody,
      sharedMemoryGrainSize
    );

    if (_eventHandle.leaveCellSpecification().multithreading) {
      peano::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::datatraversal::autotuning::CallLeaveCellOnRegularStationaryGrid);
    }
  }
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Ascend<Vertex,Cell,State,EventHandle>::ascend(int fineGridLevel) {
  const bool runOperation =
    (_eventHandle.ascendSpecification().manipulates == peano::MappingSpecification::WHOLE_TREE) ||
    (_eventHandle.ascendSpecification().manipulates == peano::MappingSpecification::ONLY_LEAVES && fineGridLevel == _treeDepth);

  if (runOperation) {
    const tarch::la::Vector<DIMENSIONS,int> NumberOfCoarseGridCells = _gridContainer.getNumberOfCells(fineGridLevel-1);
    const int                               sharedMemoryGrainSize   =
      !_eventHandle.ascendSpecification().multithreading ? 0 :
      peano::datatraversal::autotuning::Oracle::getInstance().parallelise(
        tarch::la::volume(NumberOfCoarseGridCells),peano::datatraversal::autotuning::AscendOnRegularStationaryGrid
      );

    _ascendLoopBody.setCoarseGridLevel(fineGridLevel-1);
    peano::datatraversal::SingleLevelCellLoop<AscendLoopBody> loop(
        NumberOfCoarseGridCells,
        _ascendLoopBody,
      sharedMemoryGrainSize
    );

    if (_eventHandle.ascendSpecification().multithreading) {
      peano::datatraversal::autotuning::Oracle::getInstance().parallelSectionHasTerminated(peano::datatraversal::autotuning::AscendOnRegularStationaryGrid);
    }
  }
}


template <class Vertex, class Cell, class State, class EventHandle>
void peano::grid::nodes::tasks::Ascend<Vertex,Cell,State,EventHandle>::operator() () {
  _treeRemainsStatic = true;

  for (int level=_treeDepth+1; level>=1; level--) {
    if (level==1) {
      touchVerticesLastTime( level );
      ascend(level);
    }
    else if (level==_treeDepth+1) {
      leaveCells(level-1);
    }
    else {
      touchVerticesLastTime( level );
      ascend(level);
      leaveCells(level-1);
    }
  }

  if (!_calledTouchVertexLastTime) {
    for (int level=_treeDepth; level>=1; level--) {
      const tarch::la::Vector<DIMENSIONS,int> NumberOfCells         = _gridContainer.getNumberOfCells(level);
      for (int i=0; i<tarch::la::volume(NumberOfCells); i++) {
        Vertex&   currentVertex  = _gridContainer.getVertex(level,i);
        _touchVertexLastTimeLoopBody.performVertexTransition(currentVertex,level);
      }
    }
  }

  // The original loop body is not destroyed yet, i.e. has not merged. Furthermore,
  // if _calledTouchVertexLastTime does not hold, this is the only body that has any
  // static information.
  _treeRemainsStatic &= _touchVertexLastTimeLoopBody.getLocalTreeRemainsStatic();

  if (_treeRemainsStatic) {
    dfor2(i)
      _gridContainer.getVertex(0,iScalar).setCurrentAdjacentCellsHeight(static_cast<peano::grid::CellFlags>(_treeDepth));
    enddforx
  }
  else {
    _state.updateRefinementHistoryBeforeStore(true,true);
    dfor2(i)
      _gridContainer.getVertex(0,iScalar).setCurrentAdjacentCellsHeight(peano::grid::NotStationary);
    enddforx
  }
}
