#include "tarch/Assertions.h"
#include "tarch/compiler/CompilerSpecificSettings.h"


template<class Data>
tarch::logging::Log  peano::heap::PlainBoundaryDataExchanger<Data>::_log( "peano::heap::PlainBoundaryDataExchanger" );



template<class Data>
peano::heap::PlainBoundaryDataExchanger<Data>::PlainBoundaryDataExchanger():
  BoundaryDataExchanger<Data>() {
}


template<class Data>
peano::heap::PlainBoundaryDataExchanger<Data>::PlainBoundaryDataExchanger(
  const std::string& identifier,
  int tag,
  int rank
):
  BoundaryDataExchanger<Data>(identifier,tag,rank) {
}


template<class Data>
peano::heap::PlainBoundaryDataExchanger<Data>::~PlainBoundaryDataExchanger() {
}


template<class Data>
int peano::heap::PlainBoundaryDataExchanger<Data>::getNumberOfSentMessages() const {
  return static_cast<int>( Base::_sendTasks.size() );
}


template<class Data>
void peano::heap::PlainBoundaryDataExchanger<Data>::postprocessStartToSendData() {
}


template<class Data>
void peano::heap::PlainBoundaryDataExchanger<Data>::postprocessFinishedToSendData() {
}


template<class Data>
void peano::heap::PlainBoundaryDataExchanger<Data>::handleAndQueueReceivedTask( const SendReceiveTask<Data>&  receivedTask ) {
  Base::_receiveTasks[Base::_currentReceiveBuffer].push_back( receivedTask );
  if(receivedTask._metaInformation.getLength() > 0) {
    Base::_receiveTasks[Base::_currentReceiveBuffer].back().triggerReceive(Base::_tag);
    logDebug(
      "receiveDanglingMessages(...)",
      "started to receive " << Base::_receiveTasks[Base::_currentReceiveBuffer].size() <<
      "th message from rank " << receivedTask._rank << " with " << receivedTask._metaInformation.getLength() <<
      " entries and data pointing to " << Base::_receiveTasks[Base::_currentReceiveBuffer].back()._data
    );
  }
}


template<class Data>
void peano::heap::PlainBoundaryDataExchanger<Data>::handleAndQueueSendTask( const SendReceiveTask<Data>&  sendTask, const std::vector<Data>& data ) {
  logTraceIn( "handleAndQueueSendTask(...)" );

  Base::_sendTasks.push_back(sendTask);
  Base::_sendTasks.back()._metaInformation.send(Base::_rank, Base::_tag, true, SendAndReceiveHeapMetaDataBlocking);

  if(data.size() > 0) {
    Base::_sendTasks.back().wrapData(data);
    Base::_sendTasks.back().triggerSend(Base::_tag);
  }

  logTraceOut( "handleAndQueueSendTask(...)" );
}
