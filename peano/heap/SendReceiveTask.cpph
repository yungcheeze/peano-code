#include "tarch/la/VectorCompare.h"

template <class Data>
tarch::logging::Log  peano::heap::SendReceiveTask<Data>::_log( "peano::heap::SendReceiveTask" );


template<class Data>
bool peano::heap::SendReceiveTask<Data>::fits(
  const tarch::la::Vector<DIMENSIONS, double>&  position,
  int                                           level
) const {
  return
    (_metaInformation.getLevel() == -1) ||
    (
      _metaInformation.getLevel() == level &&
      tarch::la::equals(_metaInformation.getPosition(), position)
    );
}


template<class Data>
void peano::heap::SendReceiveTask<Data>::setInvalid() {
  _metaInformation.setLevel(-1);
  _metaInformation.setLength(0);
  _data = 0;
}


#ifdef Asserts
template <class Data>
peano::heap::SendReceiveTask<Data>::SendReceiveTask():
  _rank(-1),
  _data(0) {
}
#endif


template <class Data>
void peano::heap::SendReceiveTask<Data>::wrapData(const std::vector<Data>& data) {
  assertion( !data.empty() );
  assertion( _data==0 );

  _data = new MPIData[data.size()];
  for (int i=0; i<static_cast<int>( data.size() ); i++) {
    #if defined(ParallelExchangePackedRecordsInHeaps)
    _data[i] = data[i].convert();
    #else
    _data[i] = data[i];
    #endif
  }
}


template <class Data>
void peano::heap::SendReceiveTask<Data>::triggerSend(int tag) {
  assertion( _data!=0 );

  int result = MPI_Isend(
    _data, _metaInformation.getLength(), MPIData::Datatype, _rank,
    tag,
    tarch::parallel::Node::getInstance().getCommunicator(), &_request
  );

  if ( result != MPI_SUCCESS ) {
    logError(
      "triggerSend(int)", "failed to send heap data to node "
      << _rank << ": " << tarch::parallel::MPIReturnValueToString(result)
    );
  }
}


template <class Data>
void peano::heap::SendReceiveTask<Data>::triggerReceive(int tag) {
  assertion( _rank >= 0 );
  assertion( _data==0 );

  _data = new typename SendReceiveTask<Data>::MPIData[ _metaInformation.getLength() ];

  int   result = MPI_Irecv(
    _data, _metaInformation.getLength(), MPIData::Datatype,
    _rank, tag, tarch::parallel::Node::getInstance().getCommunicator(),
    &_request
  );
  if ( result != MPI_SUCCESS ) {
    logError(
      "receiveDanglingMessages()",
      "failed to receive heap data from node "
      << _rank << ": " << tarch::parallel::MPIReturnValueToString(result)
    );
  }
}


template <class Data>
std::vector<Data> peano::heap::SendReceiveTask<Data>::unwrapDataAndFreeMemory() {
  std::vector<Data> result;

  for (int i=0; i<_metaInformation.getLength(); i++) {
    #if defined(ParallelExchangePackedRecordsInHeaps)
    result.push_back(_data[i].convert());
    #else
    result.push_back(_data[i]);
    #endif
  }

  if (_data!=0) {
    delete[] _data;
  }

  return result;
}
