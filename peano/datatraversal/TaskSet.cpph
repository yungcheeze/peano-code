#include "tarch/Assertions.h"

#include "peano/performanceanalysis/Analysis.h"


template <class Functor>
peano::datatraversal::TaskSet::TaskSet(
  Functor&  myTask
) {
  peano::performanceanalysis::Analysis::getInstance().fireAndForgetBackgroundTask(1);

  #if defined(SharedTBB)
  typedef GenericTaskWithCopy<Functor> Task;

  //static tbb::task_group_context ctx;

  //Task* tbbTask = new(tbb::task::allocate_root(ctx)) Task(myTask);
  Task* tbbTask = new(tbb::task::allocate_root()) Task(myTask);

  tbb::task::enqueue(*tbbTask);
  // We we use spawn, we tend to deadlock as they get too high priority
  //tbb::task::spawn(*tbbTask);

  #elif defined(SharedOMP)
    #warning @Vasco OpenMP Implementierung evtl. nicht mehr up-to-date
    #pragma omp task shared(myTask)
    {
      Functor copyOfMyTask(myTask);
      copyOfMyTask();
    }
  #else
  myTask();
  #endif
}


#ifdef SharedTBB
template <class Functor>
peano::datatraversal::TaskSet::GenericTaskWithCopy<Functor>::GenericTaskWithCopy(const Functor&  functor):
  _functor(functor)  {
}


template <class Functor>
tbb::task* peano::datatraversal::TaskSet::GenericTaskWithCopy<Functor>::execute() {
  _functor();
  return 0;
}
#endif
