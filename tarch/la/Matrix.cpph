#include "tarch/Assertions.h"


template<int Rows, int Cols, typename Scalar>
tarch::la::Matrix<Rows,Cols,Scalar>::Matrix():
  _values() {
}


template<int Rows, int Cols, typename Scalar>
tarch::la::Matrix<Rows,Cols,Scalar>::Matrix( const Scalar& initialValue ):
  _values() {
  for (int i=0; i < Rows*Cols; i++) {
    _values[i] = initialValue;
  }
}


template<int Rows, int Cols, typename Scalar>
int tarch::la::Matrix<Rows,Cols,Scalar>::rows() const {
  return Rows;
}


template<int Rows, int Cols, typename Scalar>
int tarch::la::Matrix<Rows,Cols,Scalar>::cols() const {
  return Cols;
}


template<int Rows, int Cols, typename Scalar>
int tarch::la::Matrix<Rows,Cols,Scalar>::size() const {
  return Rows * Cols;
}


template<int Rows, int Cols, typename Scalar>
Scalar& tarch::la::Matrix<Rows,Cols,Scalar>::operator() (
  int rowIndex,
  int colIndex
) {
  assertion5( rowIndex >= 0, Rows, Cols, rowIndex, colIndex, toString() );
  assertion5( colIndex >= 0, Rows, Cols, rowIndex, colIndex, toString() );
  assertion5( rowIndex < Rows, Rows, Cols, rowIndex, colIndex, toString() );
  assertion5( colIndex < Cols, Rows, Cols, rowIndex, colIndex, toString() );
  return _values[rowIndex * Cols + colIndex];
}


template<int Rows, int Cols, typename Scalar>
const Scalar & tarch::la::Matrix<Rows,Cols,Scalar>::operator() (
  int rowIndex,
  int colIndex
) const {
  assertion5( rowIndex >= 0, Rows, Cols, rowIndex, colIndex, toString() );
  assertion5( colIndex >= 0, Rows, Cols, rowIndex, colIndex, toString() );
  assertion5( rowIndex < Rows, Rows, Cols, rowIndex, colIndex, toString() );
  assertion5( colIndex < Cols, Rows, Cols, rowIndex, colIndex, toString() );
  return _values[rowIndex * Cols + colIndex];
}


template<int Rows, int Cols, typename Scalar>
std::string tarch::la::Matrix<Rows,Cols,Scalar>::toString() const {
  std::ostringstream os;
  os << "[";
  for (int i=0; i < Rows; i++) {
    os << "[";
    for (int j=0; j < Cols; j++) {
      os << _values[i * Cols + j];
      if (j + 1 < Cols) {
        os << ",";
      }
    }
    os << "]";
    if (i + 1 < Rows) {
      os << ",";
    }
  }
  os << "]";
  return os.str();
}
