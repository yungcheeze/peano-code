#include "tarch/Assertions.h"


template<int Rows, int Cols, typename Scalar>
tarch::la::Matrix<Rows,Cols,Scalar>::Matrix():
  _values() {
}


template<int Rows, int Cols, typename Scalar>
tarch::la::Matrix<Rows,Cols,Scalar>::Matrix( const Scalar& initialValue ):
  _values() {
  for (int i=0; i < Rows*Cols; i++) {
    _values[i] = initialValue;
  }
}


template<int Rows, int Cols, typename Scalar>
tarch::la::MatrixAssignList<Rows,Cols,Scalar> tarch::la::Matrix<Rows,Cols,Scalar>::operator=(
  const Scalar& value
) {
  assertion(Rows > 0);
  assertion(Cols > 0);
  _values[0] = value;
  return MatrixAssignList<Rows,Cols,Scalar>(*this,0,1);
}



template<int Rows, int Cols, typename Scalar>
int tarch::la::Matrix<Rows,Cols,Scalar>::rows() const {
  return Rows;
}


template<int Rows, int Cols, typename Scalar>
int tarch::la::Matrix<Rows,Cols,Scalar>::cols() const {
  return Cols;
}


template<int Rows, int Cols, typename Scalar>
int tarch::la::Matrix<Rows,Cols,Scalar>::size() const {
  return Rows * Cols;
}



template<int Rows, int Cols, typename Scalar>
std::string tarch::la::Matrix<Rows,Cols,Scalar>::toString() const {
  std::ostringstream os;
  os << "[";
  for (int i=0; i < Rows; i++) {
    os << "[";
    for (int j=0; j < Cols; j++) {
      os << _values[i * Cols + j];
      if (j + 1 < Cols) {
        os << ",";
      }
    }
    os << "]";
    if (i + 1 < Rows) {
      os << ",";
    }
  }
  os << "]";
  return os.str();
}



template<int Rows, int Cols, typename Scalar>
template <typename NewScalarType>
tarch::la::Matrix<Rows,Cols,NewScalarType> tarch::la::Matrix<Rows,Cols,Scalar>::convertScalar() const {
  tarch::la::Matrix<Rows,Cols,NewScalarType> result;
  for (int i=0; i < Rows; i++) {
    for (int j=0; j < Cols; j++) {
      result(j,i) = operator()(j,i);
    }
  }
  return result;
}
