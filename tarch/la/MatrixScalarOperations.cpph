namespace tarch {
namespace la {


template<typename Matrix>
  typename utils::EnableIf< IsMatrix<Matrix>::value,
Matrix&>::Type operator*= (
  Matrix&                                      matrix,
  const typename MatrixTraits<Matrix>::Scalar& scalar
) {
  typedef tarch::la::MatrixTraits<Matrix> Traits;
  for (int i=0; i < Traits::rows(matrix); i++) {
    for (int j=0; j < Traits::cols(matrix); j++) {
      Traits::elem(i,j,matrix) *= scalar;
    }
  }
  return matrix;
}

template<typename Matrix>
  typename utils::EnableIf< IsMatrix<Matrix>::value,
Matrix>::Type operator* (
  const Matrix&                                matrix,
  const typename MatrixTraits<Matrix>::Scalar& scalar
) {
  typedef tarch::la::MatrixTraits<Matrix> Traits;
  Matrix result(matrix);
  for (int i=0; i < Traits::rows(matrix); i++) {
    for (int j=0; j < Traits::cols(matrix); j++) {
      Traits::elem(i,j,result) =Traits::celem(i,j,matrix)*scalar;
    }
  }
  return result;
}

}
}
