// Copyright (C) 2009 Technische Universitaet Muenchen
// This file is part of the Peano project. For conditions of distribution and
// use, please see the copyright notice at www5.in.tum.de/peano
#ifndef _TARCH_LA_SCALAROPERATIONS_CPPH_
#define _TARCH_LA_SCALAROPERATIONS_CPPH_

#include "tarch/la/ScalarOperations.h"
#include <cmath>

namespace tarch {
namespace la {

template<typename Type>
  inline
  typename utils::EnableIf< not IsVector<Type>::value,
  Type
>::Type abs (Type value)
{
  return std::abs(value);
}

inline int abs (int value)
{
  return value < 0 ? - value : value;
}

/**
 * Computes the i-th power of a in integer arithmetic.
 */
inline int aPowI(int i,int a)
{
  int result = 1;
  for (int d=0; d<i; d++) {
    result *= a;
  }
  return result;
}

template<typename Type>
  inline
  typename utils::EnableIf<(not IsVector<Type>::value),
  bool
>::Type greater (
  Type lhs,
  Type rhs,
  Type tolerance
) {
  return lhs - rhs >  tolerance;
}

template<typename Type>
  inline
  typename utils::EnableIf<not IsVector<Type>::value,
  bool
>:: Type greaterEquals (
  Type lhs,
  Type rhs,
  Type tolerance
) {
  return lhs - rhs >= - tolerance;
}

template<typename Type>
  inline
  typename utils::EnableIf<(not IsVector<Type>::value),
  bool
>::Type smaller (
  Type lhs,
  Type rhs,
  Type tolerance
) {
  return lhs - rhs < -tolerance;
}

template<typename Type>
  inline
  typename utils::EnableIf<not IsVector<Type>::value,
  bool
>:: Type smallerEquals (
  Type lhs,
  Type rhs,
  Type tolerance
) {
  return lhs - rhs <= tolerance;
}

template<typename Type>
  inline
  typename utils::EnableIf<(not IsVector<Type>::value && not IsMatrix<Type>::value),
  bool
>::Type equals (
  Type lhs,
  Type rhs,
  Type tolerance
) {
  return std::abs(rhs - lhs) <= tolerance;
}

inline int sign (double number)
{
  if ( greater(number, 0.0) ) {
     return 1;
  }
  else if ( greater(0.0, number) ) {
     return -1;
  }
  return 0;
}

}} // namespace tarch, la

#endif /* _TARCH_LA_SCALAROPERATIONS_CPPH_ */
