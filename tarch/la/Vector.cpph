#include "tarch/Assertions.h"


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>::Vector ():
  _values() {
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>&  tarch::la::Vector<Size,Scalar>::operator= (
  const Vector<Size,Scalar>&  toAssign
) {
  for (int i=0; i<Size; i++) {
    _values[i] = toAssign._values[i];
  }
  return *this;
}


template<int Size, typename Scalar>
tarch::la::VectorAssignList<Size,Scalar> tarch::la::Vector<Size,Scalar>::operator=(
  const Scalar& value
) {
  assertion(Size > 0);
  _values[0] = value;
  return VectorAssignList<Size,Scalar>(*this,1);
}

template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>::Vector (
  const Vector<Size,Scalar>& toCopy
):
  _values() {
  for (int i=0; i<Size; i++) {
    _values[i] = toCopy._values[i];
  }
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>::Vector(
  const Scalar& initialValue
):
  _values() {
  for (int i=0; i < Size; i++) {
    _values[i] = initialValue;
  }
}

template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>::Vector(
  const Scalar& initialValue0,
  const Scalar& initialValue1
):
  _values() {
  assertion (Size == 2);
  _values[0] = initialValue0;
  _values[1] = initialValue1;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>::Vector(
  const Scalar& initialValue0,
  const Scalar& initialValue1,
  const Scalar& initialValue2
):
  _values() {
  assertion (Size == 3);
  _values[0] = initialValue0;
  _values[1] = initialValue1;
  _values[2] = initialValue2;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>::Vector(
  const Scalar& initialValue0,
  const Scalar& initialValue1,
  const Scalar& initialValue2,
  const Scalar& initialValue3
):
  _values() {
  assertion (Size == 4);
  _values[0] = initialValue0;
  _values[1] = initialValue1;
  _values[2] = initialValue2;
  _values[3] = initialValue3;
}


template<int Size, typename Scalar>
int tarch::la::Vector<Size,Scalar>::size() const {
  return Size;
}


template<int Size, typename Scalar>
const Scalar& tarch::la::Vector<Size,Scalar>::operator[] ( int index ) const {
//#pragma GCC diagnostic push // Save Warning configuration
//#pragma GCC diagnostic ignored "-Warray-bounds"
  assertion ( index >= 0 );
  assertion ( index < Size );
  return _values[index];
//#pragma GCC diagnostic pop
}

template<int Size, typename Scalar>
Scalar& tarch::la::Vector<Size,Scalar>:: operator[] ( int index ) {
  assertion ( index >= 0 );
  assertion ( index < Size );
  return _values[index];
}


template<int Size, typename Scalar>
const Scalar&  tarch::la::Vector<Size,Scalar>::operator() ( int index ) const {
  assertion ( index >= 0 );
  assertion ( index < Size );
  return _values[index];
}


template<int Size, typename Scalar>
Scalar&  tarch::la::Vector<Size,Scalar>::operator() ( int index ) {
  assertion ( index >= 0 );
  assertion2 ( index < Size, index, Size );
  return _values[index];
}

/**
 * Pipes the elements of a vector into a std::string and returns the string.
 */
template<int Size, typename Scalar>
std::string tarch::la::Vector<Size,Scalar>::toString() const {
  std::ostringstream os;
  os << "[";
  for ( int i=0; i < Size; i++ ) {
    os << _values[i];
    if ( i + 1 < Size ) {
      os << ",";
    }
  }
  os << "]";
  return os.str();
}
