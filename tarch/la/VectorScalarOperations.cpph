#include "tarch/Assertions.h"


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>& tarch::la::operator*= (
  Vector<Size,Scalar>&  vector,
  const Scalar&         scalar
) {
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    vector(i) *= scalar;
  }
  return vector;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>& tarch::la::operator/= (
  Vector<Size,Scalar>&  vector,
  const Scalar&         scalar
) {
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    vector(i) /= scalar;
  }
  return vector;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>& tarch::la::operator+= (
  Vector<Size,Scalar>&  vector,
  const Scalar&         scalar
) {
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    vector(i) += scalar;
  }
  return vector;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar>& tarch::la::operator-= (
  Vector<Size,Scalar>&  vector,
  const Scalar&         scalar
) {
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    vector(i) -= scalar;
  }
  return vector;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar> tarch::la::operator/ (
  const Vector<Size,Scalar>&  vector,
  const Scalar&               scalar
) {
  Vector<Size,Scalar> result;
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    result(i) = vector(i) / scalar;
  }
  return result;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar> tarch::la::operator+ (
  const Scalar&               scalar,
  const Vector<Size,Scalar>&  vector
) {
  return vector + scalar;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar> tarch::la::operator* (
  const Vector<Size,Scalar>&  vector,
  const Scalar&               scalar
) {
  Vector<Size,Scalar> result;
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    result(i) = vector(i) * scalar;
  }
  return result;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar> tarch::la::operator* (
  const Scalar&               scalar,
  const Vector<Size,Scalar>&  vector
) {
  Vector<Size,Scalar> result;
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    result(i) = vector(i) * scalar;
  }
  return result;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar> tarch::la::operator+ (
  const Vector<Size,Scalar>&  vector,
  const Scalar&               scalar
) {
  Vector<Size,Scalar> result;
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    result(i) = vector(i) + scalar;
  }
  return result;
}


template<int Size, typename Scalar>
tarch::la::Vector<Size,Scalar> tarch::la::operator- (
  const Vector<Size,Scalar>&  vector,
  const Scalar&               scalar
) {
  Vector<Size,Scalar> result;
  #ifdef CompilerICC
  #pragma ivdep
  #pragma simd
  #endif
  for (int i=0; i < Size; i++) {
    result(i) = vector(i)- scalar;
  }
  return result;
}


template<int Size, typename Scalar>
bool tarch::la::equals (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance 
) {
  for ( int i=0; i < Size; i++ ) {
    if ( la::abs(lhs(i) - cmp) > tolerance ) {
      return false;
    }
  }
  return true;
}


template<int Size, typename Scalar>
bool tarch::la::oneEquals (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance
) {
  for ( int i=0; i < Size; i++ ) {
    if ( la::abs(lhs(i) - cmp) < tolerance ) {
      return true;
    }
  }
  return false;
}


template<int Size, typename Scalar>
bool tarch::la::oneGreater (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance 
) {
  for ( int i=0; i < Size; i++ ) {
    if ( lhs(i) - cmp > tolerance ) {
      return true;
    }
  }
  return false;
}


template<int Size, typename Scalar>
bool tarch::la::oneGreaterEquals (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance
) {
  for ( int i=0; i < Size; i++ ) {
    if ( lhs(i) - cmp >= - tolerance ) {
      return true;
    }
  }
  return false;
}


template<int Size, typename Scalar>
bool tarch::la::allGreater (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance
) {
  for ( int i=0; i < Size; i++ ) {
    if ( lhs(i) - cmp <= tolerance ) {
      return false;
    }
  }
  return true;
}


template<int Size, typename Scalar>
bool tarch::la::allGreaterEquals (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance
) {
  for ( int i=0; i < Size; i++ ) {
    if ( lhs(i) - cmp < -tolerance ) {
      return false;
    }
  }
  return true;
}


template<int Size, typename Scalar>
bool tarch::la::allSmaller (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance 
) {
  for ( int i=0; i < Size; i++ ) {
    if ( lhs(i) - cmp >= -tolerance ) {
      return false;
    }
  }
  return true;
}


template<int Size, typename Scalar>
bool tarch::la::allSmallerEquals (
  const Vector<Size,Scalar>&  lhs,
  const Scalar&               cmp,
  const Scalar                tolerance 
) {
  for ( int i=0; i < Size; i++ ) {
    if ( lhs(i) - cmp > tolerance ) {
      return false;
    }
  }
  return true;
}
